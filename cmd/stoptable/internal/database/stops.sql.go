// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: stops.sql

package database

import (
	"context"
)

const clearAllStops = `-- name: ClearAllStops :exec
DELETE FROM stops
`

func (q *Queries) ClearAllStops(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearAllStops)
	return err
}

const createStop = `-- name: CreateStop :exec
INSERT INTO stops (
  id, name, route_id
) VALUES (
  ?, ?, ?
)
`

type CreateStopParams struct {
	ID      string
	Name    string
	RouteID string
}

func (q *Queries) CreateStop(ctx context.Context, arg CreateStopParams) error {
	_, err := q.db.ExecContext(ctx, createStop, arg.ID, arg.Name, arg.RouteID)
	return err
}

const testRouteExists = `-- name: TestRouteExists :one
SELECT EXISTS (
       SELECT route_id FROM stops
       WHERE route_id = ?
)
`

func (q *Queries) TestRouteExists(ctx context.Context, routeID string) (string, error) {
	row := q.db.QueryRowContext(ctx, testRouteExists, routeID)
	var route_id string
	err := row.Scan(&route_id)
	return route_id, err
}
