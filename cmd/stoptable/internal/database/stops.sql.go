// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: stops.sql

package database

import (
	"context"
)

const clearAllStops = `-- name: ClearAllStops :exec
DELETE FROM stops
`

func (q *Queries) ClearAllStops(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearAllStops)
	return err
}

const clearStopsByRoute = `-- name: ClearStopsByRoute :exec
DELETE FROM stops
WHERE route_id = ?
`

func (q *Queries) ClearStopsByRoute(ctx context.Context, routeID string) error {
	_, err := q.db.ExecContext(ctx, clearStopsByRoute, routeID)
	return err
}

const createStop = `-- name: CreateStop :exec
INSERT INTO stops (
  stop_id, name, route_id
) VALUES (
  ?, ?, ?
)
`

type CreateStopParams struct {
	StopID  string
	Name    string
	RouteID string
}

func (q *Queries) CreateStop(ctx context.Context, arg CreateStopParams) error {
	_, err := q.db.ExecContext(ctx, createStop, arg.StopID, arg.Name, arg.RouteID)
	return err
}

const queryStopsBySubstring = `-- name: QueryStopsBySubstring :many
SELECT stop_id FROM stops
WHERE name LIKE format('%%%s%%', ?)
`

func (q *Queries) QueryStopsBySubstring(ctx context.Context, format interface{}) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, queryStopsBySubstring, format)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var stop_id string
		if err := rows.Scan(&stop_id); err != nil {
			return nil, err
		}
		items = append(items, stop_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const testRouteExists = `-- name: TestRouteExists :one
SELECT EXISTS (
       SELECT route_id FROM stops
       WHERE route_id = ?
)
`

func (q *Queries) TestRouteExists(ctx context.Context, routeID string) (string, error) {
	row := q.db.QueryRowContext(ctx, testRouteExists, routeID)
	var route_id string
	err := row.Scan(&route_id)
	return route_id, err
}
